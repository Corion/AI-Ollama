package AI::Ollama::Client 0.01;
# DO NOT EDIT! This is an autogenerated file.
use 5.020;
use Moo 2;
use experimental 'signatures';

use AI::Ollama::CopyModelRequest;
use AI::Ollama::CreateModelRequest;
use AI::Ollama::CreateModelResponse;
use AI::Ollama::CreateModelStatus;
use AI::Ollama::DeleteModelRequest;
use AI::Ollama::GenerateChatCompletionRequest;
use AI::Ollama::GenerateChatCompletionResponse;
use AI::Ollama::GenerateCompletionRequest;
use AI::Ollama::GenerateCompletionResponse;
use AI::Ollama::GenerateEmbeddingRequest;
use AI::Ollama::GenerateEmbeddingResponse;
use AI::Ollama::Message;
use AI::Ollama::Model;
use AI::Ollama::ModelInfo;
use AI::Ollama::ModelInfoRequest;
use AI::Ollama::ModelsResponse;
use AI::Ollama::PullModelRequest;
use AI::Ollama::PullModelResponse;
use AI::Ollama::PullModelStatus;
use AI::Ollama::PushModelRequest;
use AI::Ollama::PushModelResponse;
use AI::Ollama::PushModelStatus;
use AI::Ollama::RequestOptions;
use AI::Ollama::ResponseFormat;

has 'ua' => (
    is => 'lazy',
    default => sub { Mojo::UserAgent->new },
);

=head2 C<< checkBlob >>

Check to see if a blob exists on the Ollama server which is useful when creating models.

=cut

sub checkBlob( $self, %options ) {

    my $method = 'HEAD';

}

=head2 C<< createBlob >>

Create a blob from a file. Returns the server file path.

=cut

sub createBlob( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::->new( \%options );
    # resp. validate %options against 
    # send as application/octet-stream
}

=head2 C<< generateChatCompletion >>

Generate the next message in a chat with a provided model.

=cut

sub generateChatCompletion( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::GenerateChatCompletionRequest->new( \%options );
    # resp. validate %options against GenerateChatCompletionRequest
    # send as application/json
}

=head2 C<< copyModel >>

Creates a model with another name from an existing model.

=cut

sub copyModel( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::CopyModelRequest->new( \%options );
    # resp. validate %options against CopyModelRequest
    # send as application/json
}

=head2 C<< createModel >>

Create a model from a Modelfile.

=cut

sub createModel( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::CreateModelRequest->new( \%options );
    # resp. validate %options against CreateModelRequest
    # send as application/json
}

=head2 C<< deleteModel >>

Delete a model and its data.

=cut

sub deleteModel( $self, %options ) {

    my $method = 'DELETE';

    my $request = AI::Ollama::DeleteModelRequest->new( \%options );
    # resp. validate %options against DeleteModelRequest
    # send as application/json
}

=head2 C<< generateEmbedding >>

Generate embeddings from a model.

=cut

sub generateEmbedding( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::GenerateEmbeddingRequest->new( \%options );
    # resp. validate %options against GenerateEmbeddingRequest
    # send as application/json
}

=head2 C<< generateCompletion >>

Generate a response for a given prompt with a provided model.

=cut

sub generateCompletion( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::GenerateCompletionRequest->new( \%options );
    # resp. validate %options against GenerateCompletionRequest
    # send as application/json
}

=head2 C<< pullModel >>

Download a model from the ollama library.

=cut

sub pullModel( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::PullModelRequest->new( \%options );
    # resp. validate %options against PullModelRequest
    # send as application/json
}

=head2 C<< pushModel >>

Upload a model to a model library.

=cut

sub pushModel( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::PushModelRequest->new( \%options );
    # resp. validate %options against PushModelRequest
    # send as application/json
}

=head2 C<< showModelInfo >>

Show details about a model including modelfile, template, parameters, license, and system prompt.

=cut

sub showModelInfo( $self, %options ) {

    my $method = 'POST';

    my $request = AI::Ollama::ModelInfoRequest->new( \%options );
    # resp. validate %options against ModelInfoRequest
    # send as application/json
}

=head2 C<< listModels >>

List models that are available locally.

=cut

sub listModels( $self, %options ) {

    my $method = 'GET';

}


1;
